import {ChromosomeGenerator} from "../../search/ChromosomeGenerator";
import {NodeGene} from "../NetworkComponents/NodeGene";
import {ConnectionGene} from "../NetworkComponents/ConnectionGene";
import {NeatMutation} from "../Operators/NeatMutation";
import {ActivationFunction} from "../NetworkComponents/ActivationFunction";
import {RegressionNode} from "../NetworkComponents/RegressionNode";
import {ScratchEvent} from "../../testcase/events/ScratchEvent";
import {NeatCrossover} from "../Operators/NeatCrossover";
import {NeatChromosome} from "../Networks/NeatChromosome";

export abstract class NeatChromosomeGenerator implements ChromosomeGenerator<NeatChromosome> {

    /**
     * The mutation operator.
     */
    protected _mutationOp: NeatMutation;

    /**
     * The crossover operator.
     */
    protected _crossoverOp: NeatCrossover;

    /**
     * Constructs a new NeatChromosomeGenerator.
     * @param mutationConfig the configuration parameter for the mutation operator.
     * @param crossoverConfig the configuration parameter for the crossover operator.
     */
    protected constructor(mutationConfig: Record<string, (string | number)>, crossoverConfig: Record<string, (string | number)>) {
        const mutationOperator = new NeatMutation(mutationConfig);
        const crossOverOperator = new NeatCrossover(crossoverConfig);
        this._mutationOp = mutationOperator;
        this._crossoverOp = crossOverOperator;
    }

    /**
     * Generates a single NeatChromosome.
     * @returns NeatChromosome generated by the specified generator.
     */
    abstract get(): NeatChromosome;

    /**
     * Creates connections between input and output.
     * @param inputNodes all inputNodes of the generated network mapped to the sprites they represent ([sprite][nodes]).
     * @param outputNodes all outputNodes of the generated network.
     * @returns ConnectionGene[] the generated network connections.
     */
    abstract createConnections(inputNodes?: NodeGene[][], outputNodes?: NodeGene[]): ConnectionGene[];

    /**
     * Adds regression nodes to the network.
     * @param allNodes contains all nodes of the generated network.
     * @param parameterizedEvents contains all parameterized Events of the given Scratch-Project.
     */
    protected addRegressionNodes(allNodes: NodeGene[], parameterizedEvents: ScratchEvent[]): void {
        for (const event of parameterizedEvents) {
            for (const parameter of event.getSearchParameterNames()) {
                // Create the regression Node and add it to the NodeList
                const regressionNode = new RegressionNode(allNodes.length, event, parameter, ActivationFunction.NONE);
                allNodes.push(regressionNode)
            }
        }
    }

    setCrossoverOperator(crossoverOp: NeatCrossover): void {
        this._crossoverOp = crossoverOp;
    }

    setMutationOperator(mutationOp: NeatMutation): void {
        this._mutationOp = mutationOp;
    }
}
